// Generated by CoffeeScript 1.6.3
(function() {
  var Google;

  if (typeof window === 'undefined') {
    throw new Error('Google-maps package can be used only in browser.');
  }

  Google = (function() {
    function Google() {}

    Google.URL = 'https://maps.googleapis.com/maps/api/js?sensor=false';

    Google.KEY = null;

    Google.WINDOW_CALLBACK_NAME = '__google_maps_api_provider_initializator__';

    Google.google = null;

    Google.loading = false;

    Google.callbacks = [];

    Google.load = function(fn) {
      var script, url,
        _this = this;
      if (this.google === null) {
        if (this.loading === true) {
          this.callbacks.push(fn);
        } else {
          this.loading = true;
          window[this.WINDOW_CALLBACK_NAME] = function() {
            return _this._ready(fn);
          };
          url = this.URL;
          if (this.KEY !== null) {
            url += "&key=" + this.KEY;
          }
          url += "&callback=" + this.WINDOW_CALLBACK_NAME;
          script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = url;
          document.body.appendChild(script);
        }
      } else {
        fn(this.google);
      }
      return {
        then: function() {
          throw new Error('Using promises is not supported anymore. Please take a look in new documentation and use callback instead.');
        }
      };
    };

    Google._ready = function(fn) {
      var _i, _len, _ref;
      if (fn == null) {
        fn = null;
      }
      Google.loading = false;
      if (Google.google === null) {
        Google.google = window.google;
      }
      fn(Google.google);
      _ref = Google.callbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fn = _ref[_i];
        fn(Google.google);
      }
      return Google.callbacks = [];
    };

    return Google;

  }).call(this);

  if (typeof module === 'object') {
    module.exports = Google;
  } else {
    window.GoogleMapsLoader = Google;
  }

}).call(this);
